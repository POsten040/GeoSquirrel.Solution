// <auto-generated />
using System;
using GeoSquirrelClient.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeoSquirrelClient.Migrations
{
    [DbContext(typeof(GeoSquirrelClientContext))]
    [Migration("20210128202811_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GeoSquirrelClient.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GeoSquirrelClient.Models.Cache", b =>
                {
                    b.Property<int>("CacheId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<decimal>("Latitude");

                    b.Property<decimal>("Longitude");

                    b.Property<string>("Name");

                    b.Property<string>("UserEmail");

                    b.HasKey("CacheId");

                    b.ToTable("Caches");

                    b.HasData(
                        new
                        {
                            CacheId = 1,
                            DateCreated = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 45.5252m,
                            Longitude = -122.7163m,
                            Name = "Pittock Mansion"
                        },
                        new
                        {
                            CacheId = 2,
                            DateCreated = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 45.5051m,
                            Longitude = -122.6750m,
                            Name = "Portland"
                        },
                        new
                        {
                            CacheId = 3,
                            DateCreated = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 53.350140m,
                            Longitude = -6.266155m,
                            Name = "Ireland"
                        },
                        new
                        {
                            CacheId = 4,
                            DateCreated = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 20.798363m,
                            Longitude = -156.331924m,
                            Name = "Maui"
                        },
                        new
                        {
                            CacheId = 5,
                            DateCreated = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 40.367474m,
                            Longitude = -82.996216m,
                            Name = "Ohio"
                        },
                        new
                        {
                            CacheId = 6,
                            DateCreated = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 55.751244m,
                            Longitude = 37.618423m,
                            Name = "Russia"
                        },
                        new
                        {
                            CacheId = 7,
                            DateCreated = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 45.508888m,
                            Longitude = -73.561668m,
                            Name = "Montreal"
                        },
                        new
                        {
                            CacheId = 8,
                            DateCreated = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 22.572645m,
                            Longitude = 88.363892m,
                            Name = "kolkataindia"
                        },
                        new
                        {
                            CacheId = 9,
                            DateCreated = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 23.185884m,
                            Longitude = 79.974380m,
                            Name = "Jabalpur"
                        },
                        new
                        {
                            CacheId = 10,
                            DateCreated = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 9.0820m,
                            Longitude = 8.6753m,
                            Name = "Nigeria"
                        },
                        new
                        {
                            CacheId = 11,
                            DateCreated = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 28.3949m,
                            Longitude = 84.1240m,
                            Name = "Nepal"
                        },
                        new
                        {
                            CacheId = 12,
                            DateCreated = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 43.651070m,
                            Longitude = -73.561668m,
                            Name = "Toronto"
                        },
                        new
                        {
                            CacheId = 13,
                            DateCreated = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 28.644800m,
                            Longitude = -77.216721m,
                            Name = "New Dehli"
                        });
                });

            modelBuilder.Entity("GeoSquirrelClient.Models.CacheGame", b =>
                {
                    b.Property<int>("CacheGameId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CacheId");

                    b.Property<int>("GameId");

                    b.HasKey("CacheGameId");

                    b.HasIndex("CacheId");

                    b.HasIndex("GameId");

                    b.ToTable("CacheGame");
                });

            modelBuilder.Entity("GeoSquirrelClient.Models.CacheGamePlayer", b =>
                {
                    b.Property<int>("CacheGamePlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CacheGameId");

                    b.Property<int?>("CacheId");

                    b.Property<bool>("FoundCache");

                    b.Property<int?>("GameId");

                    b.Property<int>("GamePlayerId");

                    b.HasKey("CacheGamePlayerId");

                    b.HasIndex("CacheGameId");

                    b.HasIndex("CacheId");

                    b.HasIndex("GameId");

                    b.HasIndex("GamePlayerId");

                    b.ToTable("CacheGamePlayers");
                });

            modelBuilder.Entity("GeoSquirrelClient.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("UserEmail");

                    b.HasKey("GameId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Name = "Game 1"
                        },
                        new
                        {
                            GameId = 2,
                            Name = "Game 2"
                        });
                });

            modelBuilder.Entity("GeoSquirrelClient.Models.GamePlayer", b =>
                {
                    b.Property<int>("GamePlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameId");

                    b.Property<int>("PlayerId");

                    b.HasKey("GamePlayerId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlayer");
                });

            modelBuilder.Entity("GeoSquirrelClient.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("UserEmail");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            Name = "Svea",
                            UserEmail = "svealinneawade@gmail.com"
                        },
                        new
                        {
                            PlayerId = 2,
                            Name = "Nathan",
                            UserEmail = "nathanschrader@icloud.com"
                        },
                        new
                        {
                            PlayerId = 3,
                            Name = "Patrick",
                            UserEmail = "posten.coding@gmail.com"
                        },
                        new
                        {
                            PlayerId = 4,
                            Name = "Randel",
                            UserEmail = "randel.c.moore@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GeoSquirrelClient.Models.CacheGame", b =>
                {
                    b.HasOne("GeoSquirrelClient.Models.Cache", "Cache")
                        .WithMany()
                        .HasForeignKey("CacheId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoSquirrelClient.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeoSquirrelClient.Models.CacheGamePlayer", b =>
                {
                    b.HasOne("GeoSquirrelClient.Models.CacheGame", "CacheGame")
                        .WithMany()
                        .HasForeignKey("CacheGameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoSquirrelClient.Models.Cache", "Cache")
                        .WithMany()
                        .HasForeignKey("CacheId");

                    b.HasOne("GeoSquirrelClient.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("GeoSquirrelClient.Models.GamePlayer", "GamePlayer")
                        .WithMany()
                        .HasForeignKey("GamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeoSquirrelClient.Models.GamePlayer", b =>
                {
                    b.HasOne("GeoSquirrelClient.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoSquirrelClient.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GeoSquirrelClient.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GeoSquirrelClient.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoSquirrelClient.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GeoSquirrelClient.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
